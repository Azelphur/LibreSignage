/**
 * @file Tests for the JavaScript Queue class.
 */

const test = require("ava");
const sinon = require("sinon");
const Queue = require("libresignage/queue/Queue");
const APIInterfaceStub = require("APIInterfaceStub");
const APIEndpoints = require("libresignage/api/APIEndpoints");

test.before(t => { console.log = () => {}; });

test(".load() throws if name is null", async t => {
	let api = new APIInterfaceStub("http://localhost");
	let queue = new Queue(api);

	await t.throwsAsync(async () => { await queue.load(null); });
});

test(".load() loads Queue data", async t => {
	let api = new APIInterfaceStub("http://localhost");
	let queue = new Queue(api);

	await queue.load("default");

	t.is(queue.get_name(), "default");
	t.is(queue.get_owner(), "admin");
	t.deepEqual(Array.from(queue.get_slidearray().map(x => x.get("id"))), ["0"]);
});

test(".create() throws if name is null", async t => {
	let api = new APIInterfaceStub("http://localhost");
	let queue = new Queue(api);

	await t.throwsAsync(async () => { await queue.create(null); });
});

test(".create() creates a new Queue", async t => {
	let api = new APIInterfaceStub("http://localhost");
	let queue = new Queue(api);
	let spy = sinon.spy(queue, "load");

	await queue.create("tests-queue");

	t.true(spy.calledOnce);
	t.is(queue.get_name(), "tests-queue");
});

test(".remove() throws if no Queue is loaded", async t => {
	let api = new APIInterfaceStub("http://localhost");
	let queue = new Queue(api);

	await t.throwsAsync(async () => { await queue.remove(); });
});

test(".remove() removes a Queue", async t => {
	let api = new APIInterfaceStub("http://localhost");
	let queue = new Queue(api);

	await queue.load("default");

	try { await queue.remove(); } catch (e) { t.fail(e.message); }
	t.pass();
});

test(".update() throws if no Queue is loaded", async t => {
	let api = new APIInterfaceStub("http://localhost");
	let queue = new Queue(api);

	await t.throwsAsync(async () => { await queue.update(); });
});

test(".update() updates the Queue data", async t => {
	let api = new APIInterfaceStub("http://localhost");
	let queue = new Queue(api);
	let spy = sinon.spy(queue, "load");

	await queue.load("default");

	t.true(spy.calledOnce);
});

test(".has_slide() throws if no Queue is loaded", t => {
	let api = new APIInterfaceStub("http://localhost");
	let queue = new Queue(api);

	t.throws(() => { queue.has_slide("0"); });
})

test(".has_slide() returns correct boolean value", async t => {
	let api = new APIInterfaceStub("http://localhost");
	let queue = new Queue(api);

	await queue.load("default");

	t.false(queue.has_slide("999"));
	t.true(queue.has_slide("0"));
});

test(".get_queues() returns a list of all Queue IDs", async t => {
	let api = new APIInterfaceStub("http://localhost");

	t.deepEqual(await Queue.get_queues(api), ["default"]);
});
