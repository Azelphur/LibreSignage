/**
 * @file Tests for the SlideArray JavaScript class.
 */

const test = require("ava");
const sinon = require("sinon");
const SlideArray = require("libresignage/queue/SlideArray");
const Slide = require("libresignage/slide/Slide");
const APIInterfaceStub = require("APIInterfaceStub");

test(".filter_dict() correctly filters based on key-value pairs", t => {
	let api = new APIInterfaceStub("http://localhost");
	let arr = new SlideArray();

	for (let i = 0; i < 10; i++) {
		let s = new Slide(api);

		let get_stub = sinon.stub(s, "get");
		get_stub.withArgs("id").returns("id-" + i);
		get_stub.withArgs("name").returns("name-" + i);

		let has_stub = sinon.stub(s, "has");
		has_stub.withArgs("id").returns(true);
		has_stub.withArgs("name").returns(true);

		arr.push(s);
	}

	t.deepEqual(
		Array.from(arr.filter_dict({"id": "id-5"})),
		[arr[5]]
	);
	t.deepEqual(
		Array.from(arr.filter_dict({"name": "name-5"})),
		[arr[5]]
	);
	t.deepEqual(
		Array.from(arr.filter_dict({"id": "id-999"})),
		[]
	);
});

test(".filter_dict() returns entire SlideArray with empty filter dict", t => {
	let api = new APIInterfaceStub("http://localhost");
	let arr = new SlideArray();

	for (let i = 0; i < 10; i++) {
		let s = new Slide(api);

		let get_stub = sinon.stub(s, "get");
		get_stub.withArgs("id").returns("id-" + i);
		get_stub.withArgs("name").returns("name-" + i);

		let has_stub = sinon.stub(s, "has");
		has_stub.withArgs("id").returns(true);
		has_stub.withArgs("name").returns(true);

		arr.push(s);
	}

	t.deepEqual(
		arr.filter_dict({}),
		arr
	);
});
